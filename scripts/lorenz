#!/usr/bin/env python
# -*- coding: utf-8 -*-
# lorenz
# Copyright (c) 2020 Hugh Coleman
#
# This file is part of hughcoleman/lorenz, a historically accurate simulator of
# the Lorenz SZ40 Cipher Machine. It is released under the MIT License (see
# LICENSE.)
import argparse

import lorenz.machine

# import auxillary devices
import lorenz.patterns
import lorenz.telegraphy

def parse(settings):
    """ Parse the notation in the command-line parameters. """

    # This regular expression (generally) matches the format below.
    # 
    #     S1-S2-S3-S4-S5,M37-M61,X1-X2-X3-X4-X5
    #
    # Valid separators are commas and dashes. So long as a consistent separator 
    # is used to separate rotors from other rotors in the same group, and 
    # groups of rotors from each other, then it will be matched.
    # 
    # Validating the numerals in each "slot" is handled later, so that the user
    # can be provided decent feedback as to what is wrong with their notation.
        
    notation = re.compile(
        r"\b(\d{1,2})([\-,])(\d{1,2})\2(\d{1,2})\2(\d{1,2})\2(\d{1,2})([\-,])(\d{1,2})\2(\d{1,2})(\10)(\d{1,2})\2(\d{1,2})\2(\d{1,2})\2(\d{1,2})\2(\d{1,2})\b"
    )

    if not (groups := re.search(notation, settings)):  # noqa: E231
        raise ValueError("Unrecognized positions format.")

    # filter out separators and cast to int.
    positions = [int(position) for position in groups if position.isdigit()]
        
if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    # configure: machine operating mode
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-e", "--encrypt", action="store_true", help="perform an encryption"
    )
    group.add_argument(
        "-d", "--decrypt", action="store_true", help="perform a decryption"
    )

    # configure: machine cipher settings
    parser.add_argument("-c", "--cams", help="cam patterns")
    parser.add_argument("-p", "--positions", help="rotor positions, in standard german format")

    # configure: input stream
    parser.add_argument(
        "input",
        type=argparse.FileType("r"),
        help="input text to encrypt/decrypt",
    )

    args = parser.parse_args()

    # Create an instance of SZ40 with the supplied parameters.
    machine = lorenz.machine.SZ40(None)
